name: Build & Release

on:
  push:
    tags:
      - "v*"

permissions:
  contents: write

jobs:
  build:
    runs-on: windows-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Read Python version
        id: python-version
        shell: powershell
        run: |
          $PYTHON_VERSION = (Get-Content .python-version -Raw).Trim()
          echo "version=$PYTHON_VERSION" >> $env:GITHUB_OUTPUT
          echo "PYTHON_VERSION=$PYTHON_VERSION" >> $env:GITHUB_ENV

      - name: "Set up Python"
        uses: actions/setup-python@v5
        with:
          python-version-file: ".python-version"
      - name: Install uv
        uses: astral-sh/setup-uv@v6
      - name: Install the project
        run: uv sync --locked --all-extras --dev

      - name: Install MinGW
        run: choco install mingw --yes --force

      - name: Add MinGW to PATH
        shell: powershell
        run: |
          $mingwPath = "C:\ProgramData\chocolatey\lib\mingw\tools\install\mingw64\bin"
          echo "$mingwPath" >> $env:GITHUB_PATH

      - name: Download PyInstaller source
        run: |
          git clone https://github.com/pyinstaller/pyinstaller.git

      - name: Compile PyInstaller bootloader
        run: |
          cd PyInstaller/bootloader
          python waf distclean
          python waf configure --gcc
          python waf all --target-arch=64bit

      - name: Install PyInstaller (with compiled bootloader)
        run: |
          cd PyInstaller
          uv pip install .

      - name: Build main executable
        run: |
          uv run pyinstaller --clean --onefile --noconsole --icon=icon.ico --name=XboxBackupManager --version-file version_info.txt main.py

      - name: Build updater executable
        run: |
          uv run pyinstaller --onefile --noconsole --icon=icon.ico --name=XboxBackupManager-Updater updater.py

      # Generate checksums for verification
      - name: Generate checksums
        shell: powershell
        run: |
          $mainHash = (Get-FileHash "dist\XboxBackupManager.exe" -Algorithm SHA256).Hash
          $updaterHash = (Get-FileHash "dist\XboxBackupManager-Updater.exe" -Algorithm SHA256).Hash

          Write-Output "XboxBackupManager.exe SHA256: $mainHash" | Out-File -FilePath checksums.txt -Encoding UTF8
          Write-Output "XboxBackupManager-Updater.exe SHA256: $updaterHash" | Out-File -FilePath checksums.txt -Encoding UTF8 -Append

          # Also create individual hash files for automated tools
          Write-Output $mainHash | Out-File -FilePath "XboxBackupManager.exe.sha256" -Encoding UTF8 -NoNewline
          Write-Output $updaterHash | Out-File -FilePath "XboxBackupManager-Updater.exe.sha256" -Encoding UTF8 -NoNewline

      # Submit to VirusTotal automatically
      - name: Submit to VirusTotal - Main App
        id: vt-main
        uses: crazy-max/ghaction-virustotal@v4
        with:
          vt_api_key: ${{ secrets.VT_API_KEY }}
          files: |
            dist/XboxBackupManager.exe
        continue-on-error: true

      - name: Submit to VirusTotal - Updater
        id: vt-updater
        uses: crazy-max/ghaction-virustotal@v4
        with:
          vt_api_key: ${{ secrets.VT_API_KEY }}
          files: |
            dist/XboxBackupManager-Updater.exe
        continue-on-error: true

      # Store VirusTotal URLs for release notes
      - name: Extract VirusTotal URLs
        shell: powershell
        run: |
          $vtMainUrl = ""
          $vtUpdaterUrl = ""

          # Get SHA256 hashes to construct VirusTotal URLs
          $mainHash = (Get-FileHash "dist\XboxBackupManager.exe" -Algorithm SHA256).Hash.ToLower()
          $updaterHash = (Get-FileHash "dist\XboxBackupManager-Updater.exe" -Algorithm SHA256).Hash.ToLower()

          $vtMainUrl = "https://www.virustotal.com/gui/file/$mainHash"
          $vtUpdaterUrl = "https://www.virustotal.com/gui/file/$updaterHash"

          # Save URLs to environment for release notes
          echo "VT_MAIN_URL=$vtMainUrl" >> $env:GITHUB_ENV
          echo "VT_UPDATER_URL=$vtUpdaterUrl" >> $env:GITHUB_ENV

          Write-Host "VirusTotal URLs generated:"
          Write-Host "Main App: $vtMainUrl"
          Write-Host "Updater: $vtUpdaterUrl"

      # Move files to expected locations for release
      - name: Prepare release artifacts
        shell: powershell
        run: |
          Move-Item "dist\XboxBackupManager.exe" "XboxBackupManager.exe"
          Move-Item "dist\XboxBackupManager-Updater.exe" "XboxBackupManager-Updater.exe"

      # Create comprehensive release with all artifacts
      - name: Create Release
        uses: ncipollo/release-action@v1
        with:
          tag: ${{ github.ref_name }}
          artifacts: |
            XboxBackupManager.exe
            XboxBackupManager-Updater.exe
            checksums.txt
            XboxBackupManager.exe.sha256
            XboxBackupManager-Updater.exe.sha256
          name: Xbox Backup Manager ${{ github.ref_name }}
          generateReleaseNotes: true
          draft: true
          body: |
            ## 🔒 Security Information

            **VirusTotal Scans:**
            - 🛡️ **Main Application**: [${{ env.VT_MAIN_URL }}](${{ env.VT_MAIN_URL }})
            - 🔄 **Updater**: [${{ env.VT_UPDATER_URL }}](${{ env.VT_UPDATER_URL }})

            > ⏳ **Note**: VirusTotal analysis may take a few minutes to complete after release.

            **File Verification:**
            - SHA256 checksums are provided for all binaries
            - Use `Get-FileHash XboxBackupManager.exe` (PowerShell) or `sha256sum XboxBackupManager.exe` (Linux/Mac) to verify

            **Build Information:**
            - Built with custom PyInstaller bootloader to reduce false positives
            - Python ${{ env.PYTHON_VERSION }}
            - Built on GitHub Actions with full transparency

            **For Users Experiencing Antivirus Warnings:**
            1. ✅ Check the VirusTotal results linked above
            2. 📁 Add the application folder to your antivirus exclusions
            3. 🔍 The source code is fully open and auditable
            4. 🔄 All builds are reproducible through GitHub Actions

            ---

            ## 📥 Downloads

            - **XboxBackupManager.exe** - Main application
            - **XboxBackupManager-Updater.exe** - Auto-updater component
            - **checksums.txt** - SHA256 checksums for verification

  # Optional: Additional job for extended security checks
  security-scan:
    runs-on: ubuntu-latest
    needs: build
    if: success()

    steps:
      # Just a summary step since we're only using VirusTotal
      - name: Security Analysis Summary
        run: |
          echo "## Security Analysis Completed" >> security_summary.md
          echo "- VirusTotal submission: ✅ Completed" >> security_summary.md
          echo "- SHA256 checksums: ✅ Generated" >> security_summary.md
          echo "- Custom bootloader: ✅ Used" >> security_summary.md
          echo "- Build transparency: ✅ Full GitHub Actions log available" >> security_summary.md
